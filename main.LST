C51 COMPILER V9.01   MAIN                                                                  02/06/2017 22:29:03 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*  ***************温控器程序****************  */
   2          
   3          #include<reg51.h>
   4          #include"lcd.h"
   5          #include"temp.h"
   6          int settemp = 12;       //初始设定温度
   7          sbit sc = P1^0
   8          ;       //控制光耦的输出
   9          sbit uptemp = P3^0;     //提高温度
  10          sbit lowtemp = P3^1;//降低温度
  11          void LcdDisplay(int); //温度显示
  12          void controlout ();     //控制光耦输出
  13          int testset();     //检测温度调整，返回调整后值
  14          
  15          
  16          
  17          /*   **********************主函数**********************    */
  18          
  19          void main()
  20          {  
  21   1      
  22   1              LcdInit();                       //初始化LCD1602
  23   1              LcdWriteCom(0x88);      //写地址 80表示初始地址
  24   1              LcdWriteData('C');
  25   1      
  26   1                       
  27   1              while(1)
  28   1              {       int s;
  29   2                      controlout();
  30   2                  s = testset();
  31   2                      LcdWriteCom(0x8a);               //写地址 80表示初始地址
  32   2                  LcdWriteData('0'+s/10); //设定十位
  33   2              LcdWriteCom(0x8b
  34   2                      );               //写地址 80表示初始地址
  35   2                  LcdWriteData('0'+s%10); //设定个位
  36   2                      LcdDisplay(Ds18b20ReadTemp());
  37   2      
  38   2              }
  39   1      }
  40          /*   **********检查温度设定并返回设定值**************     */   
  41           int testset ()
  42           {      
  43   1       int i = 1;
  44   1       if(uptemp == 1)
  45   1       {
  46   2       Lcd1602_Delay1ms(10);
  47   2       if(uptemp == 1)
  48   2       settemp++;
  49   2       while((i<500)&&(uptemp == 1))
  50   2       {
  51   3       Lcd1602_Delay1ms(1);
  52   3       i++;
  53   3       }
  54   2       }
  55   1       if(lowtemp == 1)
C51 COMPILER V9.01   MAIN                                                                  02/06/2017 22:29:03 PAGE 2   

  56   1       {
  57   2       Lcd1602_Delay1ms(10);
  58   2       if(lowtemp == 1)
  59   2        settemp--; 
  60   2        while((i<500)&&(lowtemp == 1))
  61   2        {
  62   3        Lcd1602_Delay1ms(1);
  63   3        i++;
  64   3        }
  65   2       }
  66   1        return settemp;          //返回设定温度
  67   1       }
  68          /*    ********* 获取温度并控制光耦输出************     */
  69                  void controlout ()
  70                  {
  71   1          int  livetemp; //实时温度
  72   1              livetemp = Ds18b20ReadTemp();     //获取实时温度
  73   1              if(livetemp< 0)                         //当温度值为负数
  74   1              {
  75   2                      livetemp=livetemp-1;
  76   2                      livetemp=~livetemp;      //减1取反求原码
  77   2                      livetemp=livetemp*0.0625;       
  78   2              }
  79   1              else
  80   1              livetemp=livetemp*0.0625;          //换算       
  81   1              if(livetemp<settemp)    
  82   1              sc=0;                   //      温度高时，光耦不通
  83   1              if((livetemp-settemp)>3)                        
  84   1              sc=1;                    //     温度低时，光耦通
  85   1              }
  86          /*************************************************** lcd输出显示*****************************             
             -      */
  87          
  88          void LcdDisplay(int temp)        //lcd显示
  89          {
  90   1         
  91   1              unsigned char  datas[] = {0, 0, 0, 0, 0}; //定义数组
  92   1              float tp;
  93   1              if(temp< 0)                             //当温度值为负数
  94   1              {
  95   2                      LcdWriteCom(0x80);      //写地址 80表示初始地址
  96   2                  LcdWriteData('-');  //显示负
  97   2                      temp=temp-1;
  98   2                      temp=~temp;      //减1取反求原码
  99   2                      tp=temp;
 100   2                      temp=tp*0.0625*100+0.5; 
 101   2              
 102   2              }
 103   1              else
 104   1              {                       
 105   2                      LcdWriteCom(0x80);              //写地址 80表示初始地址
 106   2                  LcdWriteData('+');          //显示正
 107   2                      tp=temp;              //正数补码就是本身
 108   2                      temp=tp*0.0625*100+0.5;    //换算
 109   2                      
 110   2              }
 111   1               
 112   1              datas[0] = temp / 10000;          //百位
 113   1              datas[1] = temp % 10000 / 1000; //十位
 114   1              datas[2] = temp % 1000 / 100;  //个位
 115   1              datas[3] = temp % 100 / 10;        //十分位
 116   1              datas[4] = temp % 10;              //百分位
C51 COMPILER V9.01   MAIN                                                                  02/06/2017 22:29:03 PAGE 3   

 117   1              
 118   1      
 119   1              LcdWriteCom(0x82);                //写地址 80表示初始地址
 120   1              LcdWriteData('0'+datas[0]); //百位 
 121   1      
 122   1              LcdWriteCom(0x83);               //写地址 80表示初始地址
 123   1              LcdWriteData('0'+datas[1]); //十位
 124   1      
 125   1      
 126   1              LcdWriteCom(0x84);              //写地址 80表示初始地址
 127   1              LcdWriteData('0'+datas[2]); //个位 
 128   1      
 129   1              LcdWriteCom(0x85);              //写地址 80表示初始地址
 130   1              LcdWriteData('.');              //显示 ‘.’
 131   1      
 132   1              LcdWriteCom(0x86);                  //写地址 80表示初始地址
 133   1              LcdWriteData('0'+datas[3]); //百分位 
 134   1      
 135   1      
 136   1              LcdWriteCom(0x87);               //写地址 80表示初始地址
 137   1              LcdWriteData('0'+datas[4]); //百分位
 138   1      
 139   1               
 140   1      }
 141          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    578    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
